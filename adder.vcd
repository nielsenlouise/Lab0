$date
	Wed Sep 26 19:21:28 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testFull4BitAdder $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " overflow $end
$var wire 1 # carryout $end
$var reg 4 $ a [3:0] $end
$var reg 4 % b [3:0] $end
$var reg 1 & carryin $end
$scope module adder $end
$var wire 4 ' a [3:0] $end
$var wire 4 ( b [3:0] $end
$var wire 1 " overflow $end
$var wire 4 ) sum [3:0] $end
$var wire 1 * carryout2 $end
$var wire 1 + carryout1 $end
$var wire 1 , carryout0 $end
$var wire 1 # carryout $end
$var reg 1 - carryin $end
$scope module adder0 $end
$var wire 1 . a $end
$var wire 1 / andAout $end
$var wire 1 0 andBout $end
$var wire 1 1 b $end
$var wire 1 - carryin $end
$var wire 1 , carryout $end
$var wire 1 2 sum $end
$var wire 1 3 xorAout $end
$upscope $end
$scope module adder1 $end
$var wire 1 4 a $end
$var wire 1 5 andAout $end
$var wire 1 6 andBout $end
$var wire 1 7 b $end
$var wire 1 , carryin $end
$var wire 1 + carryout $end
$var wire 1 8 sum $end
$var wire 1 9 xorAout $end
$upscope $end
$scope module adder2 $end
$var wire 1 : a $end
$var wire 1 ; andAout $end
$var wire 1 < andBout $end
$var wire 1 = b $end
$var wire 1 + carryin $end
$var wire 1 * carryout $end
$var wire 1 > sum $end
$var wire 1 ? xorAout $end
$upscope $end
$scope module adder3 $end
$var wire 1 @ a $end
$var wire 1 A andAout $end
$var wire 1 B andBout $end
$var wire 1 C b $end
$var wire 1 * carryin $end
$var wire 1 # carryout $end
$var wire 1 D sum $end
$var wire 1 E xorAout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xE
xD
0C
xB
xA
0@
x?
x>
1=
x<
x;
0:
x9
x8
17
x6
x5
04
x3
x2
01
x0
x/
0.
0-
x,
x+
x*
bx )
b110 (
b0 '
0&
b110 %
b0 $
x#
x"
bx !
$end
#50000
03
0/
19
05
1?
0;
0E
0A
00
#100000
bx0 !
bx0 )
02
0B
0,
#150000
0#
bx10 !
bx10 )
18
06
#200000
0+
#250000
bx110 !
bx110 )
1>
0<
#300000
0*
#350000
b110 !
b110 )
0D
0"
#1000000
07
1.
14
b100 %
b100 (
b11 $
b11 '
#1050000
13
#1100000
b111 !
b111 )
12
#3000000
11
17
0=
04
1:
b11 %
b11 (
b101 $
b101 '
#3050000
03
1/
#3100000
b110 !
b110 )
02
1,
#3150000
b100 !
b100 )
08
16
#3200000
1+
#3250000
b0 !
b0 )
0>
1<
#3300000
1*
#3350000
b1000 !
b1000 )
1D
1"
#4000000
01
1=
0.
14
b110 %
b110 (
b110 $
b110 '
#4050000
0?
1;
0/
09
15
#4100000
1>
0<
0,
b1110 !
b1110 )
18
06
#4150000
b1100 !
b1100 )
08
#5000000
07
1C
1@
b1100 %
b1100 (
b1110 $
b1110 '
#5050000
19
05
1A
#5100000
b1110 !
b1110 )
18
0+
1#
#5150000
b1010 !
b1010 )
0>
0"
#6000000
17
1.
0:
b1110 %
b1110 (
b1011 $
b1011 '
#6050000
09
15
13
1?
0;
#6100000
08
1+
12
b1101 !
b1101 )
1>
0*
#6150000
0>
1<
b1 !
b1 )
0D
1"
#6200000
1*
#6250000
b1001 !
b1001 )
1D
0"
#7000000
11
07
1:
b1101 %
b1101 (
b1111 $
b1111 '
#7050000
03
1/
19
05
0?
1;
#7100000
02
1,
18
0+
b1110 !
b1110 )
1>
0<
#7150000
08
16
b1000 !
b1000 )
0>
#7200000
1+
#7250000
b1100 !
b1100 )
1>
#8000000
0=
0.
b1001 %
b1001 (
b1110 $
b1110 '
#8050000
1?
0;
13
0/
#8100000
0>
1<
0*
b1001 !
b1001 )
12
0,
#8150000
1*
0D
1"
b11 !
b11 )
18
06
#8200000
b1011 !
b1011 )
1D
0"
0+
#8250000
b1111 !
b1111 )
1>
0<
#8300000
0*
#8350000
b111 !
b111 )
0D
1"
#9000000
17
04
0:
b1011 %
b1011 (
b1000 $
b1000 '
#9050000
0?
#9100000
b11 !
b11 )
0>
#10000000
1=
0C
1.
14
1:
b111 %
b111 (
b1111 $
b1111 '
#10050000
1E
0A
03
1/
09
15
1;
#10100000
1D
0#
02
1,
b1000 !
b1000 )
08
1+
1*
#10150000
18
1>
b110 !
b110 )
0D
1B
#10200000
1#
#10250000
0"
#11000000
1C
0:
0@
b1111 %
b1111 (
b11 $
b11 '
#11050000
1?
0;
#11100000
b10 !
b10 )
0>
1<
0*
#11150000
1*
b1010 !
b1010 )
1D
0B
1"
#11200000
b10 !
b10 )
0D
1B
0"
0#
#11250000
1#
1"
#11300000
0"
#12000000
07
0=
0.
b1001 %
b1001 (
b10 $
b10 '
#12050000
19
05
0?
13
0/
#12100000
08
16
0+
1>
0<
b101 !
b101 )
12
0,
#12150000
1+
0>
0*
b11 !
b11 )
18
06
#12200000
1>
b1111 !
b1111 )
1D
0B
1"
0+
#12250000
0#
b1011 !
b1011 )
0>
#12300000
0"
#13000000
01
04
b1000 %
b1000 (
b0 $
b0 '
#13050000
03
09
#13100000
02
b1000 !
b1000 )
08
#14000000
